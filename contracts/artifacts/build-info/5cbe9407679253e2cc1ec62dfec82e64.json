{
	"id": "5cbe9407679253e2cc1ec62dfec82e64",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.22",
	"solcLongVersion": "0.8.22+commit.4fc1097e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Arrays.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n// // contract myArrays {\n// //     uint256[] public array1 = [1, 2, 3, 4, 5, 6, 7];\n\n// //     function arraycall() public view returns (uint256[]memory) {\n// //             return array1;\n// //         }\n// //     function getMyArray(uint _i) public view returns(uint256) {\n// //         require(_i < array1.length);\n// //         return array1[_i];\n// //     }\n// // }\n\n// contract array_operation{\n//     uint[] myArray = [1,2,3];\n//     function toAdd(uint _num) public{\n//         myArray.push(_num);\n//     }\n\n//     // function toPop(uint _num) public{\n//     //     myArray.pop(_num);\n//     // }\n \n//     function toDel(uint _num) public{\n//         delete myArray[_num];\n//     }\n\n    \n//     function showTodo() public view returns(uint[] memory){\n//         return myArray;\n//     }\n\n// } \n\n// contract static_array {\n//     function myArr() public pure returns(int[5] memory) {\n//         int[5] memory data = [int(50),-63,77,-28,90];\n//         return data;\n//     }\n// }\n\n// // Dyanmic arrays \n// contract dynamicArryas {\n//     uint[]  data = [1,2,3,4,5]; //static array\n//     int[] data1; \n//     function dyArr() public returns(uint[] memory,int[] memory) {\n//         data1 = [int(-68),878,89,7,45,64,57];\n    \n//         return (data,data1);\n//     }\n// }\n\n// //array operations \n// contract access {\n//     uint[]  data = [1,2,3,4,5]; //static array\n//     int[] data1; \n//     function dyArr() public returns(int) {\n//         data1 = [int(-68),878,89,7,45,64,57];\n\n//         int x = data1[2];\n    \n//         return x;\n//     }\n// }\n\n// SImilaly firgettoing the leangth of the Array use\n// <dataType> <variable_name> = <Array_declared_variable>.length\n\n// contract slice { \n//     uint[] MyArray = [1,2,3,4,5];\n//     function myArray() public pure returns(int[] memory) {\n//         int[] memory Slice = slice(MyArray,0,2);\n//         return Slice;\n//     }\n// Not yet confirmed\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"sources": {
			"contracts/Arrays.sol": {
				"ast": {
					"absolutePath": "contracts/Arrays.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".21"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						}
					],
					"src": "32:1932:0"
				},
				"id": 0
			}
		}
	}
}