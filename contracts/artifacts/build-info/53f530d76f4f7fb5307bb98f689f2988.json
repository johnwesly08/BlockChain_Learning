{
	"id": "53f530d76f4f7fb5307bb98f689f2988",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.23",
	"solcLongVersion": "0.8.23+commit.f704f362",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Array.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <=0.9.0;\r\n\r\n// contract array{\r\n//     uint[] myArray = [1,2,3];\r\n//     function toAdd(uint _num) public{\r\n//         myArray.push(_num);\r\n//     }\r\n\r\n//     function toPop(uint _num) public{\r\n//         myArray.pop(_num);\r\n//     }\r\n \r\n//     function toDel(uint _num) public{\r\n//         delete myArray[_num];\r\n//     }\r\n\r\n    \r\n//     function showTodo() public view returns(uint[] memory){\r\n//         return myArray;\r\n//     }\r\n\r\n// } \r\n\r\n//Strings \r\n\r\n\r\n// contract myStr {\r\n//     string text;\r\n//     function getter() public returns(string memory) {\r\n//         text = \"John Wesly\";\r\n//         return text;\r\n//     }\r\n// }\r\n\r\n// contract myStr {\r\n//     string myText;\r\n\r\n//     function setter() public {\r\n//         myText = \"Hello\";\r\n//     }\r\n//     function getter() view public returns(string memory) {\r\n//         return myText;\r\n//     }\r\n// }\r\n\r\n\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"sources": {
			"contracts/Array.sol": {
				"ast": {
					"absolutePath": "contracts/Array.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<=",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:32:0"
						}
					],
					"src": "33:892:0"
				},
				"id": 0
			}
		}
	}
}